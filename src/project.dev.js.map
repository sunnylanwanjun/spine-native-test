{"version":3,"sources":["assets/tests/memory/Memory.ts","assets/tests/memory/Object.ts","assets/cases/PageViewEx/PageViewCtrl.js","assets/cases/PageViewEx/PageViewEx.js","assets/cases/PageViewEx/PageViewMonitor.js","assets/tests/spineTest/RoleView.ts","assets/tests/spineTest/TestSpineScene.ts","assets/tests/spineTest/Test_2.ts"],"names":["_a","cc","_decorator","ccclass","property","Memory","_super","__extends","_this","apply","this","arguments","count","prefabs","ins","prototype","start","setCount","nodeCount","node","getChildByName","label","getComponent","Label","string","update","dt","onBtnLoad","log","self","i","loader","loadRes","Prefab","err","prefab","push","instantiate","parent","onBtnUnload","depends","getDependsRecursively","index","length","dep","res","getRes","release","onBtnSwitchScene","director","loadScene","onBtnGC","sys","garbageCollect","__decorate","Component","exports","default","NewClass","onLoad","uuid","onEnable","onDisable","onDestroy","Class","extends","properties","curNum","curTotal","pageTeample","target","require","_createPage","page","position","p","color","Color","r","Math","floor","random","g","b","setCurrentPageIndex","onBtnPrev","prev","getCurrentPageIndex","getPages","onBtnNext","next","onJumpHome","scrollToPage","plusPage","callback","lessPageNum","onAddPage","addPage","onInsertPage","_this2","insertPage","onRemovePage","_this3","pages","removePage","onRemovePageAtIndex","_this4","removePageAtIndex","onRemoveAllPage","removeAllPages","onPageEvent","sender","eventType","PageView","EventType","PAGE_TURNING","console","SizeMode","Enum","Unified","Free","Direction","Horizontal","Vertical","PageViewEx","ScrollView","editor","CC_EDITOR","ctor","_curPageIdx","_lastPageIdx","_pages","_curItemIdx","_scrollToIdx","sizeMode","type","tooltip","CC_DEV","notify","_syncSizeMode","direction","_syncScrollDirection","scrollThreshold","Float","slide","range","autoPageTurningThreshold","pageTurningEventTiming","indicator","PageViewIndicator","setPageView","pageTurningSpeed","pageEvents","EventHandler","transpositionCircle","transpositionCount","Integer","statics","__preload","on","_updateAllPagesSize","_dispatchPageTurningEvent","off","_monitor","content","init","_initPages","_itemUpdate","childs","children","every","child","itemRect","getBoundingBox","x","y","focalPoint","height","width","itemUpdate","contains","tmp","_curItemIdxChanged","curItemIdxChanged","originalIndex","indexOf","_curPageIdxChanged","curPageIdxChanged","_changedState","_testDraw","graphics","Graphics","clear","strokeColor","RED","moveTo","lineTo","rect","point","stroke","oldIdx","newIdx","undefined","oldItemIdx","newItemIdx","childrenCount","_checkPrevTransposition","_checkNextTransposition","_checkInitTransposition","slice","transCount","layout","Layout","removeChild","insertChild","spacingX","spacingY","before","paddingLeft","paddingTop","_adjustPadding","after","_updatePageView","stopAutoScroll","_scrollToOffsetByPageIndex","addChild","getCurrentItemIndex","getCurrentItem","getItems","pageCount","splice","warnID","name","pageList","locPages","len","idx","timeInSecond","scrollToOffset","_moveOffsetValue","getScrollEndedEventTiming","horizontal","vertical","padding","lastPage","paddingRight","paddingBottom","updateLayout","enabled","_layoutDirty","_scrollCenterOffsetX","abs","_contentOriginalX","_scrollCenterOffsetY","_contentOriginalY","_refresh","selfSize","getContentSize","setContentSize","warn","maxCount","parseInt","_checkPages","emitEvents","emit","pageTurnEnded","_isScrollable","offset","nextIndex","curPageCenter","nextPageCenter","_isQuicklyScrollable","touchMoveVelocity","_touchEndedTime","_touchBeganTime","_getDragDirection","moveOffset","_handleMoveLogic","touch","_handleReleaseLogic","bounceBackStarted","_startBounceBackIfNeeded","pSub","_touchBeganPosition","_touchEndPosition","dragDirection","_calculateTouchMoveVelocity","_onTouchBegan","event","captureListeners","getLocation","now","_onTouchMoved","_touchMovePosition","_onTouchEnded","_onTouchCancelled","_onMouseWheel","module","_PageViewEx","circleScale","itemAnchor","itemAnchorX","itemAnchorY","pageView","_pageView","itemNode","itemIndex","scale","min","center","anchorX","anchorY","curPageIndex","RoleView","role","playerAction","actionName","element","setAnimation","pausedAction","paused","sp","Skeleton","RoleView_1","TestSpineScene","roleLayer","roleNodeNew","roleNodeOld","lab","_ms","_fps","_role","_actionName","_pausedAction","toFixed","clickButton","customEventData","addRole","clearButton","removeAllChildren","toString","setActionButton","roleNodes","roleView","Vec2","Node","objs","nodeTest","nodeTest1","nodeTest2","onBtnHide","onBtnShow","forEach","active","onBtnTest","onBtnTest1","onBtnTest2","onBtnCanvas"],"mappings":"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","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Memory extends cc.Component {\r\n\r\n    private count: number = 0;\r\n    private prefabs: any[] = [];\r\n    private ins: any[] = [];\r\n    start() {\r\n        this.setCount();\r\n    }\r\n\r\n    setCount() {\r\n        let nodeCount = this.node.getChildByName(\"count\");\r\n        let label = nodeCount.getComponent(cc.Label);\r\n        label.string = \"count \" + this.count;\r\n    }\r\n\r\n    update(dt) {\r\n    }\r\n\r\n    onBtnLoad() {\r\n        cc.log(\"onBtnLoad\");\r\n        var self = this;\r\n        // cc.loader.loadRes(\"memory/bg\", cc.Prefab, function (err, prefab) {\r\n        //     cc.log(err, prefab);\r\n\r\n        //     cc.instantiate(prefab).parent = self.node.getChildByName(\"loaded\");\r\n\r\n        //     self.count++;\r\n        //     self.setCount();\r\n        // });\r\n        for (let i = 0; i < 10; i++) {\r\n            cc.loader.loadRes(\"memory/bg/\" + (i + 1), cc.Prefab, function (err, prefab) {\r\n                cc.log(err, prefab);\r\n                self.prefabs.push(prefab);\r\n\r\n                var ins = cc.instantiate(prefab);\r\n                self.ins.push(ins);\r\n                ins.parent = self.node.getChildByName(\"loaded\");\r\n\r\n                self.count++;\r\n                self.setCount();\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    onBtnUnload() {\r\n        cc.log(\"onBtnUnload\");\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            let depends = cc.loader.getDependsRecursively(\"memory/bg/\" + (i + 1));\r\n            cc.log(depends);\r\n            for (let index = 0; index < depends.length; index++) {\r\n                const dep = depends[index];\r\n                var res = cc.loader.getRes(dep);\r\n                cc.log(res);\r\n\r\n            }\r\n            cc.loader.release(depends);\r\n\r\n            this.count--;\r\n            this.setCount();\r\n        }\r\n    }\r\n\r\n    onBtnSwitchScene() {\r\n        cc.director.loadScene(\"memory2\");\r\n    }\r\n\r\n    onBtnGC(){\r\n        cc.sys.garbageCollect();\r\n    }\r\n\r\n}\r\n","\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n    start() {\r\n\r\n    }\r\n\r\n    onLoad(){\r\n        cc.log(this.node.uuid, \"onLoad\");\r\n    }\r\n\r\n    onEnable() {\r\n        cc.log(this.node.uuid, \"onEnable\");\r\n    }\r\n\r\n    onDisable() {\r\n        cc.log(this.node.uuid, \"onDisable\");\r\n    }\r\n\r\n    onDestroy() {\r\n        cc.log(this.node.uuid, \"destroy\");\r\n    }\r\n}\r\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        curNum: 3,\n        curTotal: 10,\n        pageTeample: cc.Prefab,\n        target: require(\"PageViewEx\"),\n        label: cc.Label\n    },\n\n    _createPage() {\n        var page = cc.instantiate(this.pageTeample);\n        page.position = new cc.p(0, 0);\n        var color = new cc.Color();\n        color.r = Math.floor(Math.random() * 255);\n        color.g = Math.floor(Math.random() * 255);\n        color.b = Math.floor(Math.random() * 255);\n        page.color = color;\n        return page;\n    },\n\n    onLoad() {\n        // 设置的当前页面为 1\n        this.target.setCurrentPageIndex(3);\n    },\n\n    onBtnPrev() {\n        var prev = this.target.getCurrentPageIndex() - 1;\n        if (prev < 0) {\n            prev = this.target.getPages().length - 1;\n        }\n        this.target.setCurrentPageIndex(prev);\n    },\n\n    onBtnNext() {\n        var next = this.target.getCurrentPageIndex() + 1;\n        if (next > this.target.getPages().length - 1) {\n            next = 0;\n        }\n        this.target.setCurrentPageIndex(next);\n        // this.target.scrollToPage(0);\n    },\n\n    update() {\n        // 当前页面索引\n        this.label.string = \"第\" + (this.target.getCurrentPageIndex() + 1) + \"页\";\n    },\n\n    // 返回首页\n    onJumpHome() {\n        // 第二个参数为滚动所需时间，默认值为 0.3 秒\n        this.target.scrollToPage(0);\n    },\n\n    // 添加页面\n    plusPage(callback) {\n        if (this.curNum > this.curTotal) {\n            return;\n        }\n        this.curNum++;\n        if (callback) {\n            callback();\n        }\n    },\n\n    // 减少页面\n    lessPageNum(callback) {\n        if (this.curNum <= 0) {\n            return;\n        }\n        this.curNum--;\n        if (callback) {\n            callback();\n        }\n    },\n\n    // 添加页面\n    onAddPage() {\n        this.plusPage(() => {\n            this.target.addPage(this._createPage());\n        });\n    },\n\n    // 插入当前页面\n    onInsertPage() {\n        this.plusPage(() => {\n            this.target.insertPage(this._createPage(), this.target.getCurrentPageIndex());\n        });\n    },\n\n    // 移除最后一个页面\n    onRemovePage() {\n        this.lessPageNum(() => {\n            var pages = this.target.getPages();\n            this.target.removePage(pages[pages.length - 1]);\n        });\n    },\n\n    // 移除当前页面\n    onRemovePageAtIndex() {\n        this.lessPageNum(() => {\n            this.target.removePageAtIndex(this.target.getCurrentPageIndex());\n        });\n    },\n\n    // 移除所有页面\n    onRemoveAllPage() {\n        this.target.removeAllPages();\n        this.curNum = 0;\n    },\n\n    // 监听事件\n    onPageEvent(sender, eventType) {\n        // 翻页事件\n        if (eventType !== cc.PageView.EventType.PAGE_TURNING) {\n            return;\n        }\n        console.log(\"当前所在的页面索引:\" + sender.getCurrentPageIndex());\n    }\n});\n","/**\n * 页面视图每个页面统一的大小类型\n */\nvar SizeMode = cc.Enum({\n    /**\n     * 每个页面统一大小\n     * @property {Number} Unified\n     */\n    Unified: 0,\n    /**\n     * 每个页面大小随意\n     * @property {Number} Free\n     */\n    Free: 1\n});\n\n/**\n * 页面视图滚动类型\n */\nvar Direction = cc.Enum({\n    /**\n     * 水平滚动\n     * @property {Number} Horizontal\n     */\n    Horizontal: 0,\n    /**\n     * 垂直滚动\n     * @property {Number} Vertical\n     */\n    Vertical: 1\n});\n\n/**\n * 滚动视图事件类型\n */\nvar EventType = cc.Enum({\n    /**\n     * 翻页事件\n     * @property {Number} PAGE_TURNING\n     */\n    PAGE_TURNING: 0\n\n});\n\n/**\n * 页面视图组件\n * @class PageViewEx\n * @extends ScrollView\n * @author erbo\n */\nvar PageViewEx = cc.Class({\n    extends: cc.ScrollView,\n\n    editor: CC_EDITOR && {\n        menu: 'i18n:MAIN_MENU.component.ui/PageViewEx',\n        help: 'i18n:COMPONENT.help_url.pageview',\n        inspector: 'packages://inspector/inspectors/comps/ccpageview.js',\n        executeInEditMode: false\n    },\n\n    ctor: function () {\n        this._curPageIdx = 0; // 当前页面索引\n        this._lastPageIdx = 0;// 最后一个页面索引\n        this._pages = []; // 页面，原始排序引用（数组保持最初的排序）\n\n        this._curItemIdx; // 当前实际项目索引\n        this._scrollToIdx; // 需要滚动到的目标页面索引\n    },\n\n    properties: {\n\n        /**\n         * 页面视图中每个页面大小类型\n         * @property {PageViewEx.SizeMode} sizeMode\n         */\n        sizeMode: {\n            default: SizeMode.Unified,\n            type: SizeMode,\n            tooltip: CC_DEV && 'i18n:COMPONENT.pageview.sizeMode',\n            notify: function () {\n                this._syncSizeMode();\n            }\n        },\n\n        /**\n         * 页面视图滚动类型\n         * @property {PageViewEx.Direction} direction\n         */\n        direction: {\n            default: Direction.Horizontal,\n            type: Direction,\n            tooltip: CC_DEV && 'i18n:COMPONENT.pageview.direction',\n            notify: function () {\n                this._syncScrollDirection();\n            }\n        },\n\n        /**\n         * 滚动临界值，默认单位百分比，当拖拽超出该数值时，松开会自动滚动下一页，小于时则还原。\n         * @property {Number} scrollThreshold\n         */\n        scrollThreshold: {\n            default: 0.5,\n            type: cc.Float,\n            slide: true,\n            range: [0, 1, 0.01],\n            tooltip: CC_DEV && 'i18n:COMPONENT.pageview.scrollThreshold'\n        },\n\n        /**\n         * 快速滑动翻页临界值。\n         * 当用户快速滑动时，会根据滑动开始和结束的距离与时间计算出一个速度值，\n         * 该值与此临界值相比较，如果大于临界值，则进行自动翻页。\n         * @property {Number} autoPageTurningThreshold\n         */\n        autoPageTurningThreshold: {\n            default: 100,\n            type: cc.Float,\n            tooltip: CC_DEV && 'i18n:COMPONENT.pageview.autoPageTurningThreshold'\n        },\n\n        /**\n         * @property {Number} pageTurningEventTiming\n         */\n        pageTurningEventTiming: {\n            default: 0.1,\n            type: cc.Float,\n            range: [0, 1, 0.01],\n            tooltip: CC_DEV && 'i18n:COMPONENT.pageview.pageTurningEventTiming'\n        },\n\n        /**\n         * 页面视图指示器组件\n         * @property {PageViewIndicator} indicator\n         */\n        indicator: {\n            default: null,\n            type: cc.PageViewIndicator,\n            tooltip: CC_DEV && 'i18n:COMPONENT.pageview.indicator',\n            notify: function () {\n                if (this.indicator) {\n                    this.indicator.setPageView(this);\n                }\n            }\n        },\n\n        /**\n         * 每个页面翻页时所需时间。单位：秒\n         * @property {Number} pageTurningSpeed\n         */\n        pageTurningSpeed: {\n            default: 0.3,\n            type: cc.Float,\n            tooltip: CC_DEV && 'i18n:COMPONENT.pageview.pageTurningSpeed'\n        },\n\n        /**\n         * 滚动视图的事件回调函数\n         * @property {Component.EventHandler[]} pageEvents\n         */\n        pageEvents: {\n            default: [],\n            type: cc.Component.EventHandler,\n            tooltip: CC_DEV && 'i18n:COMPONENT.pageview.pageEvents'\n        },\n\n        /**\n         * 是否启用换位循环\n         */\n        transpositionCircle: {\n            default: true\n        },\n\n        /**\n         * 换位数量，即循环补充的数量，数量必须大于等于1，且小于总数量的一半\n         */\n        transpositionCount: {\n            default: 1,\n            type: cc.Integer\n        },\n\n    },\n\n    statics: {\n        SizeMode: SizeMode,\n        Direction: Direction,\n        EventType: EventType\n    },\n\n    __preload: function () {\n        this.node.on('size-changed', this._updateAllPagesSize, this);\n    },\n\n    onEnable: function () {\n        this._super();\n        if (!CC_EDITOR) {\n            this.node.on('scroll-ended-with-threshold', this._dispatchPageTurningEvent, this);\n        }\n    },\n\n    onDisable: function () {\n        this._super();\n        if (!CC_EDITOR) {\n            this.node.off('scroll-ended-with-threshold', this._dispatchPageTurningEvent, this);\n        }\n    },\n\n    onLoad: function () {\n        this._monitor = this.content.getComponent(\"PageViewMonitor\");\n        if (this._monitor) {\n            this._monitor.init(this);\n\n            this.transpositionCircle = this._monitor.transpositionCircle;\n            this.transpositionCount = this._monitor.transpositionCount;\n        }\n\n        this._initPages();\n        if (this.indicator) {\n            this.indicator.setPageView(this);\n        }\n\n        this.scrollToPage(0, this.pageTurningSpeed);\n    },\n\n    _itemUpdate(dt) {\n\n    },\n\n    update(dt) {\n        this._super(dt);\n\n        // this._testDraw();\n\n        var childs = this.content.children;\n        childs.every(function (child, index) {\n            var itemRect = child.getBoundingBox();\n            itemRect.x += this.content.x;\n            itemRect.y += this.content.y;\n\n            // 焦点\n            var focalPoint = null;\n            if (this.direction === Direction.Horizontal) {\n                focalPoint = cc.p(0, itemRect.y + itemRect.height / 2);\n            } else {\n                focalPoint = cc.p(itemRect.x + itemRect.width / 2, 0);\n            }\n\n            if (this._monitor) {\n                this._monitor.itemUpdate(dt, child, index, itemRect, focalPoint);\n            }\n\n            // 与该点碰撞的将设置为当前页\n            if (itemRect.contains(focalPoint)) {\n                if (this._curItemIdx != index) {\n                    var tmp = this._curItemIdx;\n                    this._curItemIdx = index;\n                    this._curItemIdxChanged(tmp, index);\n\n                    if (this._monitor) {\n                        this._monitor.curItemIdxChanged(tmp, index);\n                    }\n\n                    var originalIndex = this._pages.indexOf(child);\n                    var tmp = this._curPageIdx;\n                    this._curPageIdx = originalIndex;\n                    this._curPageIdxChanged(tmp, originalIndex);\n\n                    if (this._monitor) {\n                        this._monitor.curPageIdxChanged(tmp, originalIndex);\n                    }\n\n                    if (this.indicator) {\n                        this.indicator._changedState();\n                    }\n                    return false;\n                }\n            }\n            return true;\n        }, this);\n    },\n\n\n    // 绘制测试内容\n    _testDraw() {\n        if (!this.graphics) {\n            this.graphics = this.node.getChildByName(\"graphics\").getComponent(cc.Graphics);\n        }\n\n        this.graphics.clear();\n\n        this.graphics.strokeColor = cc.Color.RED;\n        this.graphics.moveTo(0, 0);\n\n        if (this.direction === Direction.Horizontal) {\n            this.graphics.lineTo(0, this.node.height / 2);\n        } else {\n            this.graphics.lineTo(this.node.width / 2, 0);\n        }\n\n        var childs = this.content.children;\n        childs.every(function (child, index) {\n            var rect = child.getBoundingBox();\n            rect.x += this.content.x;\n            rect.y += this.content.y;\n\n            var point = null;\n            if (this.direction === Direction.Horizontal) {\n                point = cc.p(0, rect.y + rect.height / 2);\n            } else {\n                point = cc.p(rect.x + rect.width / 2, 0);\n            }\n\n            if (rect.contains(point)) {\n                this.graphics.rect(rect.x, rect.y, rect.width, rect.height);\n            }\n            return true;\n        }, this);\n\n        this.graphics.stroke();\n    },\n\n    /** 当前页面索引发生变化 */\n    _curPageIdxChanged(oldIdx, newIdx) {\n        if (this._curPageIdx == this._scrollToIdx) {\n            this._scrollToIdx = undefined;\n        }\n    },\n\n    /** 当前项目索引发生变化 */\n    _curItemIdxChanged(oldItemIdx, newItemIdx) {\n        if (this.transpositionCircle) {\n            // 方向：负表示滚到上一个元素，正表示滚到一个元素\n            var direction = newItemIdx - oldItemIdx;\n            var count = this.content.childrenCount;\n            if (count > 1) {\n                if (direction < 0) {\n                    this._checkPrevTransposition(oldItemIdx, newItemIdx);\n                }\n                else if (direction > 0) {\n                    this._checkNextTransposition(oldItemIdx, newItemIdx);\n                }\n            }\n        }\n    },\n\n    /** 初始换位 */\n    _checkInitTransposition() {\n        this._checkPrevTransposition(this._curPageIdx, this._curPageIdx);\n        this._checkNextTransposition(this._curPageIdx, this._curPageIdx);\n    },\n\n    /** 检查向上换位 */\n    _checkPrevTransposition(oldIdx, newIdx) {\n        var count = this.content.childrenCount;\n        var childs = this.content.children.slice(0);\n        // 计算实际需要换位的数量\n        var transCount = this.transpositionCount - newIdx;\n        if (transCount > 0) {\n            var layout = this.content.getComponent(cc.Layout);\n\n            for (let i = 1; i <= transCount; i++) {\n                var node = childs[count - i];\n                this.content.removeChild(node);\n                this.content.insertChild(node, 0);\n                if (this.direction === Direction.Horizontal) {\n                    this.content.x -= node.width + layout.spacingX;\n                } else {\n                    this.content.y += node.height + layout.spacingY;\n                }\n                // this._curPageIdx++;\n            }\n\n            // 修正padding，同时需要修正content的位置，以确保显示内容不会表现出位置偏移\n            if (this.direction === Direction.Horizontal) {\n                var before = cc.p(layout.paddingLeft, layout.paddingTop);\n                this._adjustPadding();\n                var after = cc.p(layout.paddingLeft, layout.paddingTop);\n                this.content.x += before.x - after.x;\n            } else {\n                var before = cc.p(layout.paddingLeft, layout.paddingTop);\n                this._adjustPadding();\n                var after = cc.p(layout.paddingLeft, layout.paddingTop);\n                this.content.y -= before.y - after.y;\n            }\n\n            this._updatePageView();\n\n            // 换位会导致content的位置改变，需要将滚动停止，重新启动滚动到目标页面\n            if (this._scrollToIdx !== undefined) {\n                this.stopAutoScroll();\n                this._scrollToOffsetByPageIndex(this._scrollToIdx, true);\n            }\n        }\n    },\n\n    /** 检查向下换位 */\n    _checkNextTransposition(oldIdx, newIdx) {\n        var count = this.content.childrenCount;\n        var childs = this.content.children.slice(0);\n        // 计算实际需要换位的数量\n        var transCount = this.transpositionCount - (count - newIdx - 1);\n        if (transCount > 0) {\n            var layout = this.content.getComponent(cc.Layout);\n\n            for (let i = 1; i <= transCount; i++) {\n                var node = childs[0];\n                this.content.removeChild(node);\n                this.content.addChild(node);\n                if (this.direction === Direction.Horizontal) {\n                    this.content.x += node.width + layout.spacingX;\n                } else {\n                    this.content.y -= node.height + layout.spacingY;\n                }\n                // this._curPageIdx--;\n            }\n\n            // 修正padding，同时需要修正content的位置，以确保显示内容不会表现出位置偏移\n            if (this.direction === Direction.Horizontal) {\n                var before = cc.p(layout.paddingLeft, layout.paddingTop);\n                this._adjustPadding();\n                var after = cc.p(layout.paddingLeft, layout.paddingTop);\n                this.content.x += before.x - after.x;\n            } else {\n                var before = cc.p(layout.paddingLeft, layout.paddingTop);\n                this._adjustPadding();\n                var after = cc.p(layout.paddingLeft, layout.paddingTop);\n                this.content.y -= before.y - after.y;\n            }\n\n            this._updatePageView();\n\n            // 换位会导致content的位置改变，需要将滚动停止，重新启动滚动到目标页面\n            if (this._scrollToIdx !== undefined) {\n                this.stopAutoScroll();\n                this._scrollToOffsetByPageIndex(this._scrollToIdx, true);\n            }\n        }\n    },\n\n    onDestroy: function () {\n        this.node.off('size-changed', this._updateAllPagesSize, this);\n    },\n\n    /**\n     * 返回当前项目的索引\n     * @returns {Number}\n     */\n    getCurrentItemIndex: function () {\n        return this._curItemIdx;\n    },\n\n    /**\n    * 返回当前项目\n    */\n    getCurrentItem: function () {\n        return this.content.children[this._curItemIdx];\n    },\n\n    /**\n     * 返回当前页面原始索引\n     * @method getCurrentPageIndex\n     * @returns {Number}\n     */\n    getCurrentPageIndex: function () {\n        return this._curPageIdx;\n    },\n\n    /**\n     * 设置当前页面原始索引\n     * @method setCurrentPageIndex\n     * @param {Number} index 页面索引\n     */\n    setCurrentPageIndex: function (index) {\n        this.scrollToPage(index, true);\n    },\n\n    /**\n     * 返回所有项目\n     * @returns {Node[]}\n     */\n    getItems: function () {\n        if (this.content) {\n            return this.content.children;\n        }\n        return null;\n    },\n\n\n    /**\n     * 返回视图中的所有页面\n     * @method getPages\n     * @returns {Node[]}\n     */\n    getPages: function () {\n        return this._pages;\n    },\n\n    /**\n     * 在当前页面视图的尾部插入一个新视图\n     * @method addPage\n     * @param {Node} page\n     */\n    addPage: function (page) {\n        if (!page || this._pages.indexOf(page) !== -1 || !this.content)\n            return;\n        this.content.addChild(page);\n        this._pages.push(page);\n        this._updatePageView();\n    },\n\n    /**\n     * 将页面插入指定位置中\n     * @method insertPage\n     * @param {Node} page\n     * @param {Number} index\n     */\n    insertPage: function (page, index) {\n        if (index < 0 || !page || this._pages.indexOf(page) !== -1 || !this.content)\n            return;\n        var pageCount = this._pages.length;\n        if (index >= pageCount)\n            this.addPage(page);\n        else {\n            this._pages.splice(index, 0, page);\n            this.content.addChild(page);\n            this._updatePageView();\n        }\n    },\n\n    /**\n     * 移除指定页面\n     * @method removePage\n     * @param {Node} page\n     */\n    removePage: function (page) {\n        if (!page || !this.content) return;\n        var index = this._pages.indexOf(page);\n        if (index === -1) {\n            cc.warnID(4300, page.name);\n            return;\n        }\n        this.removePageAtIndex(index);\n    },\n\n    /**\n     * 移除指定下标的页面\n     * @method removePageAtIndex\n     * @param {Number} index\n     */\n    removePageAtIndex: function (index) {\n        var pageList = this._pages;\n        if (index < 0 || index >= pageList.length) return;\n        var page = pageList[index];\n        if (!page) return;\n        this.content.removeChild(page);\n        pageList.splice(index, 1);\n        this._updatePageView();\n    },\n\n    /**\n     * 移除所有页面\n     * @method removeAllPages\n     */\n    removeAllPages: function () {\n        if (!this.content) { return; }\n        var locPages = this._pages;\n        for (var i = 0, len = locPages.length; i < len; i++)\n            this.content.removeChild(locPages[i]);\n        this._pages.length = 0;\n        this._updatePageView();\n    },\n\n    /**\n     * 滚动到指定页面\n     * @method scrollToPage\n     * @param {Number} idx 页面索引\n     * @param {Number} timeInSecond 滚动持续时间\n     */\n    scrollToPage: function (idx, timeInSecond) {\n        if (idx < 0 || idx >= this._pages.length)\n            return;\n        if (this._curPageIdx != idx) {\n            this._scrollToIdx = idx;\n        }\n        this._scrollToOffsetByPageIndex(idx, timeInSecond);\n    },\n\n    /**\n     * 滚动到指定页面的偏移位置\n     * @param {Number} idx 页面索引\n     * @param {Number} timeInSecond 滚动持续时间\n     */\n    _scrollToOffsetByPageIndex: function (idx, timeInSecond) {\n        if (idx < 0 || idx >= this._pages.length)\n            return;\n        timeInSecond = timeInSecond !== undefined ? timeInSecond : 0.3;\n        this.scrollToOffset(this._moveOffsetValue(idx), timeInSecond, true);\n        if (this.indicator) {\n            this.indicator._changedState();\n        }\n    },\n\n    /** 覆盖 @extends ScrollView 的方法 */\n    getScrollEndedEventTiming: function () {\n        return this.pageTurningEventTiming;\n    },\n\n    /** 修改 @property {direction} 时调用 */\n    _syncScrollDirection: function () {\n        this.horizontal = this.direction === Direction.Horizontal;\n        this.vertical = this.direction === Direction.Vertical;\n    },\n\n    /** 修改 @property {sizeMode} 时调用 */\n    _syncSizeMode: function () {\n        this._adjustPadding();\n    },\n\n    /** 修正边缘填充 */\n    _adjustPadding: function () {\n        if (!this.content) { return; }\n        var layout = this.content.getComponent(cc.Layout);\n        if (layout) {\n            var childs = this.content.children;\n            if (childs.length === 0) {\n                layout.padding = 0;\n            }\n            else {\n                var lastPage = childs[childs.length - 1];\n                if (this.direction === Direction.Horizontal) {\n                    layout.paddingLeft = (this.node.width - childs[0].width) / 2;\n                    layout.paddingRight = (this.node.width - lastPage.width) / 2;\n                }\n                else if (this.direction === Direction.Vertical) {\n                    layout.paddingTop = (this.node.height - childs[0].height) / 2;\n                    layout.paddingBottom = (this.node.height - lastPage.height) / 2;\n                }\n            }\n            layout.updateLayout();\n        }\n    },\n\n    /** 刷新页面视图 */\n    _updatePageView: function () {\n        var pageCount = this._pages.length;\n\n        if (this._curPageIdx >= pageCount) {\n            this._curPageIdx = pageCount === 0 ? 0 : pageCount - 1;\n            this._lastPageIdx = this._curPageIdx;\n        }\n\n        // 进行排序\n        // for (var i = 0; i < pageCount; ++i) {\n        //     this._pages[i].setSiblingIndex(i);\n        // }\n\n        // 当页面数组变化时修改 content 大小\n        var layout = this.content.getComponent(cc.Layout);\n        if (layout && layout.enabled) {\n            layout._layoutDirty = true;\n            layout.updateLayout();\n        }\n\n        var childs = this.content.children;\n\n        // 计算居中偏移值\n        for (var i = 0; i < pageCount; ++i) {\n            if (this.direction === Direction.Horizontal) {\n                // 每一个页面居中时需要的偏移量（X）\n                childs[i]._scrollCenterOffsetX = Math.abs(this._contentOriginalX + childs[i].x);\n            } else {\n                // 每一个页面居中时需要的偏移量（Y）\n                childs[i]._scrollCenterOffsetY = Math.abs(this._contentOriginalY + childs[i].y);\n            }\n        }\n\n        // 刷新 indicator 信息与状态\n        if (this.indicator) {\n            this.indicator._refresh();\n        }\n    },\n\n    /** 刷新所有页面的大小 */\n    _updateAllPagesSize: function () {\n        if (this.sizeMode !== SizeMode.Unified) {\n            return;\n        }\n        var locPages = CC_EDITOR ? this.content.children : this._pages;\n        var selfSize = this.node.getContentSize();\n        for (var i = 0, len = locPages.length; i < len; i++) {\n            locPages[i].setContentSize(selfSize);\n        }\n    },\n\n    /** 初始化页面 */\n    _initPages: function () {\n        if (!this.content) {\n            cc.warn(\"content is null\");\n            return;\n        }\n\n        this._contentOriginalX = this.content.x;\n        this._contentOriginalY = this.content.y;\n\n        if (this.transpositionCircle) {\n            // 页面数量\n            var count = this.content.childrenCount;\n            // 支持的最大数量\n            var maxCount = parseInt((count - 1) / 2);\n\n            // 设置换位数量\n            if (this.transpositionCount > maxCount) {\n                this.transpositionCount = maxCount;\n            }\n            if (this.transpositionCount < 1) {\n                this.transpositionCount = 1;\n            }\n        }\n\n        this._checkPages();\n        this._syncScrollDirection();\n        this._syncSizeMode();\n        this._updatePageView();\n\n        if (this.transpositionCircle) {\n            this._checkInitTransposition();\n        }\n    },\n\n    /** 检查并创建原始页面引用 */\n    _checkPages() {\n        if (!this.content) { return; }\n        this._pages = [];\n        var children = this.content.children;\n        for (var i = 0; i < children.length; ++i) {\n            var page = children[i];\n            if (this._pages.indexOf(page) >= 0) { continue; }\n            this._pages.push(page);\n        }\n    },\n\n    /** 翻页事件，此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听 */\n    _dispatchPageTurningEvent: function () {\n        if (this._lastPageIdx === this._curPageIdx) return;\n        this._lastPageIdx = this._curPageIdx;\n        cc.Component.EventHandler.emitEvents(this.pageEvents, this, EventType.PAGE_TURNING);\n        this.node.emit('page-turning', this);\n\n        if (this._monitor) {\n            this._monitor.pageTurnEnded(this._curPageIdx);\n        }\n    },\n\n    /** 是否超过自动滚动临界值 */\n    _isScrollable: function (offset, index, nextIndex) {\n        if (this.sizeMode === SizeMode.Free) {\n            var curPageCenter, nextPageCenter;\n            if (this.direction === Direction.Horizontal) {\n                curPageCenter = this._pages[index]._scrollCenterOffsetX;\n                nextPageCenter = this._pages[index]._scrollCenterOffsetX;\n                return Math.abs(offset.x) >= Math.abs(curPageCenter - nextPageCenter) * this.scrollThreshold;\n            }\n            else if (this.direction === Direction.Vertical) {\n                curPageCenter = this._pages[index]._scrollCenterOffsetY;\n                nextPageCenter = this._pages[index]._scrollCenterOffsetY;\n                return Math.abs(offset.y) >= Math.abs(curPageCenter - nextPageCenter) * this.scrollThreshold;\n            }\n        }\n        else {\n            if (this.direction === Direction.Horizontal) {\n                return Math.abs(offset.x) >= this.node.width * this.scrollThreshold;\n            }\n            else if (this.direction === Direction.Vertical) {\n                return Math.abs(offset.y) >= this.node.height * this.scrollThreshold;\n            }\n        }\n    },\n\n    /** 快速滑动 */\n    _isQuicklyScrollable: function (touchMoveVelocity) {\n        // 滑动的总时间不可超过200毫秒\n        if (this._touchEndedTime - this._touchBeganTime >= 200)\n            return false;\n\n        if (this.direction === Direction.Horizontal) {\n            if (Math.abs(touchMoveVelocity.x) > this.autoPageTurningThreshold) {\n                return true;\n            }\n        }\n        else if (this.direction === Direction.Vertical) {\n            if (Math.abs(touchMoveVelocity.y) > this.autoPageTurningThreshold) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /** 通过 idx 获取偏移值数值 */\n    _moveOffsetValue: function (idx) {\n        var offset = cc.p(0, 0);\n        if (this.sizeMode === SizeMode.Free) {\n            if (this.direction === Direction.Horizontal) {\n                offset.x = this._pages[idx]._scrollCenterOffsetX;\n            }\n            else if (this.direction === Direction.Vertical) {\n                offset.y = this._pages[idx]._scrollCenterOffsetY;\n            }\n        }\n        else {\n            if (this.direction === Direction.Horizontal) {\n                offset.x = idx * this.node.width;\n            }\n            else if (this.direction === Direction.Vertical) {\n                offset.y = idx * this.node.height;\n            }\n        }\n        return offset;\n    },\n\n    /** 获取手势的方向，负表示手势向上移动，正表示手势向下移动 */\n    _getDragDirection: function (moveOffset) {\n        if (this.direction === Direction.Horizontal) {\n            if (moveOffset.x === 0) { return 0; }\n            return (moveOffset.x > 0 ? 1 : -1);\n        }\n        else if (this.direction === Direction.Vertical) {\n            // 由于滚动 Y 轴的原点在在右上角所以应该是小于 0\n            if (moveOffset.y === 0) { return 0; }\n            return (moveOffset.y < 0 ? 1 : -1);\n        }\n    },\n\n    /** 手势移动时处理的逻辑 */\n    _handleMoveLogic: function (touch) {\n        this._super(touch);\n\n        // var moveOffset = cc.pSub(this._touchBeganPosition, this._touchMovePosition);\n        // var dragDirection = this._getDragDirection(moveOffset);\n        // cc.log(\"dragDirection:\", dragDirection);\n    },\n\n    /** 手势释放时处理的逻辑 */\n    _handleReleaseLogic: function (touch) {\n        // 为开启循环滚动时需要处理边界回弹\n        var bounceBackStarted = this._startBounceBackIfNeeded();\n        var moveOffset = cc.pSub(this._touchBeganPosition, this._touchEndPosition);\n        if (!this.transpositionCircle && bounceBackStarted) {\n            var dragDirection = this._getDragDirection(moveOffset);\n            if (dragDirection === 0) {\n                return;\n            }\n            if (dragDirection > 0) {\n                this._curPageIdx = this._pages.length - 1;\n            }\n            else {\n                this._curPageIdx = 0;\n            }\n            if (this.indicator) {\n                this.indicator._changedState();\n            }\n        } else {\n            // 快速滑动翻页\n            var touchMoveVelocity = this._calculateTouchMoveVelocity();\n            if (this._isQuicklyScrollable(touchMoveVelocity)) {\n\n                var index = this._curPageIdx, nextIndex = index + this._getDragDirection(moveOffset);\n                var timeInSecond = this.pageTurningSpeed;\n\n                // var nextCount = parseInt(Math.abs(touchMoveVelocity.x / this.autoPageTurningThreshold / 10)) * this._getDragDirection(moveOffset);\n                // var nextIndex = this._curItemIdx + nextCount;\n\n                if (this.transpositionCircle) {\n                    // 可以循环翻页\n                    if (nextIndex < 0) {\n                        nextIndex = this.content.childrenCount - 1;\n                    } else if (nextIndex >= this.content.childrenCount) {\n                        nextIndex = 0;\n                    }\n                } else {\n                    // 限制不可以循环翻页\n                    if (nextIndex < 0) {\n                        nextIndex = 0;\n                    } else if (nextIndex >= this.content.childrenCount) {\n                        nextIndex = this.content.childrenCount - 1;\n                    }\n                }\n\n                // 滚动到上/下一页\n                this.scrollToPage(nextIndex, timeInSecond);\n                return;\n            }\n\n            // 滚动到当前页\n            this.scrollToPage(this._curPageIdx, this.pageTurningSpeed);\n        }\n    },\n\n    _onTouchBegan: function (event, captureListeners) {\n        this._touchBeganPosition = event.touch.getLocation();\n        this._touchBeganTime = cc.sys.now();\n        this._super(event, captureListeners);\n    },\n\n    _onTouchMoved: function (event, captureListeners) {\n        this._touchMovePosition = event.touch.getLocation();\n        this._super(event, captureListeners);\n    },\n\n    _onTouchEnded: function (event, captureListeners) {\n        this._touchEndPosition = event.touch.getLocation();\n        this._touchEndedTime = cc.sys.now();\n        this._super(event, captureListeners);\n    },\n\n    _onTouchCancelled: function (event, captureListeners) {\n        this._touchEndPosition = event.touch.getLocation();\n        this._super(event, captureListeners);\n    },\n\n    _onMouseWheel: function () { }\n});\n\nPageViewEx = module.exports = PageViewEx;","import { Direction } from \"PageViewEx\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        /**\n         * 是否启用换位循环\n         */\n        transpositionCircle: {\n            default: true\n        },\n\n        /**\n         * 换位数量，即循环补充的数量，数量必须大于等于1，且小于总数量的一半\n         */\n        transpositionCount: {\n            default: 1,\n            type: cc.Integer\n        },\n\n        /**\n         * 是否启用近大远小缩放模式\n         */\n        circleScale: false,\n\n        /**\n         * 是否动态修改项目的锚点\n         */\n        itemAnchor: false,\n        itemAnchorX: 0.5,\n        itemAnchorY: 0.5,\n\n    },\n\n    onLoad() {\n    },\n\n    init(pageView) {\n        this._pageView = pageView;\n    },\n\n    /**\n     * 项目更新逻辑\n     * @param {number} dt\n     * @param {number} itemIndex 项目索引\n     * @param {cc.Rect} itemRect 项目相对于视图的矩形信息\n     * @param {cc.Vec2} focalPoint 焦点（项目所在的位置加上自身的大小包含到焦点位置时会被表示为当前选中项）\n     */\n    itemUpdate(dt, itemNode, itemIndex, itemRect, focalPoint) {\n        if (this.circleScale) {\n            if (this._pageView.direction == Direction.Horizontal) {\n                var scale = 1 - Math.min(Math.abs(itemRect.center.x - focalPoint.x) * 0.002, 0.8);\n                itemNode.scale = scale;\n\n                if (this.itemAnchor) {\n                    itemNode.anchorX = this.itemAnchorX;\n                    itemNode.anchorY = this.itemAnchorY;\n                }\n            } else {\n                var scale = 1 - Math.min(Math.abs(itemRect.center.y - focalPoint.y) * 0.002, 0.8);\n                itemNode.scale = scale;\n\n                if (this.itemAnchor) {\n                    itemNode.anchorX = this.itemAnchorX;\n                    itemNode.anchorY = this.itemAnchorY;\n                }\n            }\n        }\n    },\n\n\n\n    /** 当前页面索引发生变化 */\n    curPageIdxChanged(oldIdx, newIdx) {\n\n    },\n\n    /** 当前项目索引发生变化 */\n    curItemIdxChanged(oldItemIdx, newItemIdx) {\n\n    },\n\n    /** 翻页完成 */\n    pageTurnEnded(curPageIndex) {\n\n    },\n\n});\n","\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class RoleView extends cc.Component {\r\n    @property(sp.Skeleton)\r\n    public role: sp.Skeleton[] = [];\r\n\r\n    public playerAction(actionName: string) {\r\n        for (let index = 0; index < this.role.length; index++) {\r\n            const element = this.role[index];\r\n            element.setAnimation(0, actionName, true);\r\n        }\r\n    }\r\n\r\n    public pausedAction(paused: boolean){\r\n        for (let index = 0; index < this.role.length; index++) {\r\n            const element = this.role[index];\r\n            element.paused = paused;\r\n        }\r\n    }\r\n}\r\n","import RoleView from \"./RoleView\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TestSpineScene extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    public roleLayer: cc.Node = null;\r\n    @property(cc.Node)\r\n    public roleNodeNew: cc.Node[] = [];\r\n    @property(cc.Node)\r\n    public roleNodeOld: cc.Node[] = [];\r\n    @property(cc.Label)\r\n    public lab: cc.Label = null;\r\n\r\n    private _ms: number = 0;\r\n    private _fps: number = 0;\r\n    onLoad() {\r\n        this.lab.string = \"0\";\r\n    }\r\n\r\n    update(dt) {\r\n        this._ms += dt * 1000;\r\n        this._fps++;\r\n        if (this._ms >= 1000) {\r\n            this.lab.string = \"数量:\" + this._role.length + \"  fps:\" + this._fps + \"  fps_frame:\" + (1 / dt).toFixed(2);\r\n            this._ms = 0;\r\n            this._fps = 0;\r\n        }\r\n    }\r\n\r\n    clickButton(event: cc.Event, customEventData: string) {\r\n        switch (customEventData) {\r\n            case \"new\":\r\n                this.addRole(this.roleNodeNew);\r\n                break;\r\n            case \"old\":\r\n                this.addRole(this.roleNodeOld);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    clearButton() {\r\n        this.roleLayer.removeAllChildren();\r\n        this._role = [];\r\n        this.lab.string = this._role.length.toString();\r\n    }\r\n\r\n    setActionButton(event: cc.Event, customEventData: string) {\r\n        this._actionName = customEventData;\r\n        for (let index = 0; index < this._role.length; index++) {\r\n            const element = this._role[index];\r\n            element.playerAction(this._actionName);\r\n        }\r\n    }\r\n\r\n    pausedAction() {\r\n        this._pausedAction = !this._pausedAction;\r\n        for (let index = 0; index < this._role.length; index++) {\r\n            const element = this._role[index];\r\n            element.pausedAction(this._pausedAction);\r\n        }\r\n    }\r\n\r\n    protected addRole(roleNodes: cc.Node[]) {\r\n        for (let index = 0; index < roleNodes.length; index++) {\r\n            const element = roleNodes[index];\r\n            let node = cc.instantiate(element);\r\n            let roleView = node.getComponent(RoleView);\r\n            if (roleView) {\r\n                roleView.playerAction(this._actionName);\r\n                roleView.pausedAction(this._pausedAction);\r\n                this._role.push(roleView);\r\n            } else {\r\n                cc.log(\"1111111111\");\r\n            }\r\n\r\n            node.position = new cc.Vec2();\r\n            this.roleLayer.addChild(node);\r\n        }\r\n    }\r\n\r\n    private _role: RoleView[] = [];\r\n    private _actionName: string = \"idle\";\r\n    private _pausedAction: boolean = false;\r\n\r\n}","// Learn TypeScript:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n    objs = [];\r\n    nodeTest: cc.Node = null;\r\n    nodeTest1: cc.Node = null;\r\n    nodeTest2: cc.Node = null;\r\n    start() {\r\n        this.nodeTest = this.node.getChildByName(\"btnTest\");\r\n        this.nodeTest1 = this.nodeTest.getChildByName(\"btnTest1\");\r\n        this.nodeTest2 = this.nodeTest.getChildByName(\"btnTest2\");\r\n        this.nodeTest.on(\"touchstart\", function (event) {\r\n            cc.log(\"11111\", event);\r\n        }, this);\r\n\r\n        this.nodeTest1.on(\"touchstart\", function () {\r\n            cc.log(\"22222\");\r\n        }, this);\r\n\r\n        this.nodeTest2.on(\"touchstart\", function () {\r\n            cc.log(\"33333\", event);\r\n        }, this);\r\n    }\r\n\r\n    onBtnHide(event: cc.Event.EventTouch) {\r\n        // var node = this.node.getChildByName(\"1\");\r\n\r\n        // var children = node.children;\r\n        // children.slice(0).forEach(function (child, index) {\r\n        //     this.objs.push(child);\r\n        //     // child.removeFromParent();\r\n        //     child.active = false;\r\n        //     cc.log(\"=======\", index);\r\n        // }, this);\r\n\r\n        // this.nodeTest.emit(\"touchstart\", event);\r\n        // this.nodeTest.dispatchEvent(event);\r\n\r\n        // var myEvent = new cc.Event.EventCustom(\"touchstart\", true);\r\n\r\n        // // myEvent.type = \"ttttt\";\r\n        // // this.nodeTest2.dispatchEvent(myEvent);\r\n\r\n        // this.nodeTest2.dispatchEvent(myEvent);\r\n\r\n        // var myEvent = new cc.Event.EventCustom(\"touchend\", true);\r\n        // this.nodeTest2.dispatchEvent(myEvent);\r\n    }\r\n\r\n    onBtnShow() {\r\n        var node = this.node.getChildByName(\"1\");\r\n        this.objs.forEach(function (child) {\r\n            // node.addChild(child);\r\n            child.active = true;\r\n        }, this);\r\n        this.objs = [];\r\n    }\r\n\r\n\r\n    onBtnTest() {\r\n        cc.log(\"onBtnTest\");\r\n    }\r\n\r\n    onBtnTest1() {\r\n        cc.log(\"onBtnTest1\");\r\n    }\r\n\r\n    onBtnTest2() {\r\n        cc.log(\"onBtnTest2\");\r\n    }\r\n\r\n    onBtnCanvas() {\r\n        cc.log(\"onBtnCanvas\");\r\n    }\r\n}\r\n"],"sourceRoot":"/source/","file":"project.dev.js"}